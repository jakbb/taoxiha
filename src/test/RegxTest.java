package test;import java.beans.PropertyDescriptor;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.azeckoski.reflectutils.ReflectUtils;import org.junit.Test;import com.taoxiha.common.utils.StringUtils;import com.taoxiha.common.utils.log.LogUtils;public class RegxTest {	//	public final static Pattern AccessFilter  = Pattern.compile("(a)");	private final static Pattern FILTERS = Pattern.compile(".*(\\.(css|js|bmp|gif|jpe?g" + "|png|tiff?|mid|mp2|mp3|mp4"			+ "|wav|avi|mov|mpeg|ram|m4v|pdf" + "|rm|smil|wmv|swf|wma|zip|rar|gz))$");	@Test	public void access(){		 Pattern AccessFilter  = Pattern.compile("[\\w\\W]*(rank)*$");//		 Pattern AccessFilter  = Pattern.compile(".*(\\.(css|js|bmp|gif|jpe?g))$");		String url="http://as.baidu.com/a/rank?cid=100&s=2.css";		Matcher matcher=AccessFilter.matcher(url);		System.out.println(matcher.matches());	}		@Test	public void urlAccess(){						String txt="http://as.baidu.com/a/rank?pre=web_am_header&f=software_1006_12";//	    String re1="";	// Non-greedy match on filler	    String re2=".*?(rank|item)";	// Variable Name 1	    Pattern p = Pattern.compile(re2);	    Matcher m = p.matcher(txt);	    if (m.find())	    {	        String var1=m.group(1);	        System.out.print("("+var1.toString()+")"+"\n");	    }	  }			 public static void main(String[] args)	  {//	    String accessUrl="http://as.baidu.com/a/item?docid=100&s=2";         String accessUrl="http://m.baidu.com/static/as/favicon.ico";         String parentUrl="http://as.baidu.com/a/rank?cid=100&s=2";//         String parentUrl="";// 	    String accessUrl="http://as.baidu.com/a/rank?cid=100&s=2";	  /*  String re1=".*?";	// Non-greedy match on filler	    String re2="(baidu)";	// Word 1	    String re3=".*?";	// Non-greedy match on filler	    String re4="(rank|item)";	// Word 2*/         String parentReg="(http://).*?(as\\.baidu\\.com\\/a\\/rank)";	    String accessReg="(http://).*?(as\\.baidu\\.com\\/a\\/)(rank|item\\?docid=)";	    Pattern PARENT_URL_FILTERS = Pattern.compile(parentReg);	    Pattern ACCESS_URL_FILTERS = Pattern.compile(accessReg);	    boolean flag = true;		if(StringUtils.isNotBlank(parentUrl) && StringUtils.isNotBlank(parentUrl)){		Matcher matcher = PARENT_URL_FILTERS.matcher(parentUrl);		flag=matcher.find();		}		if(StringUtils.isNotBlank(accessUrl) && StringUtils.isNotBlank(accessUrl)){			Matcher m = ACCESS_URL_FILTERS.matcher(accessUrl) ;			flag=m.find() && flag;			if (m.find())		    {		        String word1=m.group(1);		        String file1=m.group(2);		        String word2=m.group(3);		        String word3=m.group(4);		        System.out.print("("+word1.toString()+")"+"("+file1.toString()+")"+"("+word2.toString()+")"+"("+word3.toString()+")"+"\n");		    }		}		LogUtils.debug("flag:"+flag+"  url: "+accessUrl);	  }	 	 	 @Test	 public void ref() {		 TestEntity thing = new TestEntity();		//		 PropertyDescriptor[] proes= ReflectUtils.getInstance().get		 //				 ReflectUtils.		 String str=org.apache.commons.lang.StringUtils.capitalize("sadf");		 System.out.println(str);	}	 }