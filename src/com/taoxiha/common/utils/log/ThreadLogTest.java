package com.taoxiha.common.utils.log;import java.io.File;import java.util.HashMap;import java.util.Map;import org.apache.log4j.Appender;import org.apache.log4j.Layout;import org.apache.log4j.Logger;import org.apache.log4j.MDC;import org.apache.log4j.PatternLayout;import org.apache.log4j.RollingFileAppender;import org.apache.log4j.spi.LoggingEvent;import com.taoxiha.common.utils.date.DateUtils;import com.taoxiha.common.utils.io.FileHelper;import com.taoxiha.service.crawl.entity.CrawlInfoConfig;public class ThreadLogTest {	  public static void main(String[] args) throws Exception {	    final Logger log = Logger.getLogger("test");	    final AppenderFactory appenderFactory = new AppenderFactory();	    Thread[] threads = new Thread[10];	    long start = System.currentTimeMillis();	    for (int i = 0; i < threads.length; i++) {	      final String clientId = String.valueOf(i);	      threads[i] = new Thread() {	        public void run() {	          MDC.put("clientId", clientId);	          for (int i = 0; i < 10000; i++) {	            Appender appender = appenderFactory.getAppender(clientId);	            if (!log.isAttached(appender)) {	              log.addAppender(appender);	            }	            log.info("start: clientId = " + clientId);	            foo();	            log.info("  end: clientId = " + clientId);	          }	        }	        void foo() {}	      };	      threads[i].start();	    }	    for (int i = 0; i < threads.length; i++) {	      threads[i].join();	    }	    long end = System.currentTimeMillis();	    System.out.println(end - start);	  }	}	class AppenderFactory {	static Map<String, Appender> appenders = new HashMap<String, Appender>();	  public Appender getAppender(String clientId) {	    Appender appender = appenders.get(clientId);	    if (appender == null) {	      appender = new MyRollingFileAppender(clientId);	      appenders.put(clientId, appender);	    }	    return appender;	  }	}	class MyRollingFileAppender extends RollingFileAppender {	  private final String clientId;	  public MyRollingFileAppender(String clientId) {	    this.clientId = clientId;//	    setFile(clientId);	    Layout layout = new PatternLayout("%m%n"); 		String datadir=CrawlInfoConfig.datapath+"/"+DateUtils.getTheDateString();		File file= new File(datadir,clientId);		if(!file.isFile()){			file=FileHelper.mkdir(datadir,clientId);		}      setLayout(layout);      setFile(file.getAbsolutePath());//	    setLayout(new PatternLayout());	    activateOptions(); // 只开一次，而不是一个msg一次，那太夸张了	  }	  @Override // 为速度计，Override这个方法，而不是append, subAppend之类	  public synchronized void doAppend(LoggingEvent event) {	    String clientId = (String) MDC.get("clientId");	    if (this.clientId.equals(clientId)) {	      // 一个Appender对应一个Client，其他Client的event直接忽视	      super.doAppend(event);	    }	  }	}