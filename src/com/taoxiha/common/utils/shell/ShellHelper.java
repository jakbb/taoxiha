package com.taoxiha.common.utils.shell;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.StringWriter;public class ShellHelper {   //default time out, in millseconds   public static int DEFAULT_TIMEOUT=10000000;   public static final int DEFAULT_INTERVAL = 1000;   public static long START;   public static CommandResult exec(String command) throws IOException, InterruptedException {       Process process = Runtime.getRuntime().exec(new String[] {"/bin/bash", "-c", command});       CommandResult commandResult = wait(process);       if (process != null) {           process.destroy();       }       return commandResult;   }   private static boolean isOverTime() {       return System.currentTimeMillis() - START >= DEFAULT_TIMEOUT;   }   private static CommandResult wait(Process process) throws InterruptedException, IOException {       BufferedReader errorStreamReader = null;       BufferedReader inputStreamReader = null;       try {           errorStreamReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));           inputStreamReader = new BufferedReader(new InputStreamReader(process.getInputStream()));           //timeout control           START = System.currentTimeMillis();           boolean isFinished = false;           for (;;) {               if (isOverTime()) {                   CommandResult result = new CommandResult();                   result.setExitValue(CommandResult.EXIT_VALUE_TIMEOUT);                   result.setOutput("Command process timeout");                   return result;               }               if (isFinished) {                   CommandResult result = new CommandResult();                   result.setExitValue(process.waitFor());                                      //parse error info                   if (errorStreamReader.ready()) {                       StringBuilder buffer = new StringBuilder();                       String line;                       while ((line = errorStreamReader.readLine()) != null) {                           buffer.append(line);                       }                       result.setError(buffer.toString());                   }                   //parse info                   if (inputStreamReader.ready()) {                       StringBuilder buffer = new StringBuilder();                       BufferedWriter writer =new BufferedWriter(new StringWriter());                       String line="";                       while ((line = inputStreamReader.readLine()) != null) {                    	   writer.write(line);                    	   writer.newLine();                    	   writer.flush();                           buffer.append("\n".concat(line));                       }                       result.setOutput(buffer.toString());                   }                   return result;               }               try {                   isFinished = true;                   process.exitValue();               } catch (IllegalThreadStateException e) {                   // process hasn't finished yet                   isFinished = false;                   Thread.sleep(DEFAULT_INTERVAL);               }           }       } finally {           if (errorStreamReader != null) {               try {                   errorStreamReader.close();               } catch (IOException e) {               }           }           if (inputStreamReader != null) {               try {                   inputStreamReader.close();               } catch (IOException e) {               }           }       }   }      public static void main(String[] args) {	   try {           int timeout = Integer.parseInt(args[0]);           ShellHelper.DEFAULT_TIMEOUT = timeout;           CommandResult result = ShellHelper.exec("mkdir testdir");           if (result != null) {               System.out.println("Output:" + result.getOutput());               System.out.println("Error:" + result.getError());           }       } catch (IOException ex) {           System.out.println("IOException:" + ex.getLocalizedMessage());       } catch (InterruptedException ex) {           System.out.println("InterruptedException:" + ex.getLocalizedMessage());       }}}