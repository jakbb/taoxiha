package com.taoxiha.common.utils.xml;import java.io.IOException;import java.io.StringReader;import java.io.StringWriter;import java.util.Iterator;import java.util.List;import javax.xml.bind.JAXBContext;import javax.xml.bind.Marshaller;import javax.xml.bind.Unmarshaller;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.DocumentHelper;import org.dom4j.Element;public class XmlBeanUtils {			/**	 * 将对象转换为XML字符串	* @Title: paresToXML 	* @Author zguowei jakbb01@gmail.com	* @Time 2013-6-6 下午3:26:37	* @param obj	* @return String	* @throws	 */	public static  String paresToXML(Object obj) {		StringWriter writer = new StringWriter();		try {			JAXBContext context = JAXBContext.newInstance(obj.getClass());			Marshaller marshaller = context.createMarshaller();//			marshaller.setProperty("com.sun.xml.bind.xmlDeclaration", Boolean.FALSE);			marshaller.marshal(obj, writer);			return writer.toString();		} catch (Exception e) {			e.printStackTrace();			return null;		} finally {			if (null != writer) {				try {					writer.close();				} catch (IOException e) {					return null;				}			}		}	}		public static String getElmentValues(String xml) {		StringBuffer str = new StringBuffer();		try {			Document doc = DocumentHelper.parseText(xml);			Element el = doc.getRootElement();			for (Iterator<?> it = el.elementIterator(); it.hasNext();) {				Element element = (Element) it.next();				// // System.out.println(element.getText());				str.append(element.getText().replaceAll("[\n-\r]", ""));			}			return str.toString();		} catch (DocumentException e) {			e.printStackTrace();			return null;		}	}		/**	 * 在现有XML结构中增加节点	* @Title: addElement 	* @Description: TODO	* @Author zguowei jakbb01@gmail.com	* @Time 2013-6-6 下午3:27:40	* @param eleName 增加的节点属性	* @param eleValue 增加的节点值	* @param xml    需要操作的Xml	* @param parentEle  前一个节点	* @throws Exception	* @return String	 */	public static String addElement(String eleName,String eleValue,String xml,String parentEle) throws Exception{	 	Document doc = DocumentHelper.parseText(xml);		Element parent =  (Element) doc.selectSingleNode(parentEle);		Element newEle = parent.addElement(eleName);		newEle.setText(eleValue);		return doc.asXML();}	   /**    * 获取XML文本值   * @Title: getXmlElmentValue    * @Description: TODO   * @Author zguowei jakbb01@gmail.com   * @Time 2013-6-6 下午3:32:41   * @return String   * @throws    */   public static String getXmlElmentValue(String xml){	StringBuffer str=new StringBuffer(); 		try {			Document doc= DocumentHelper.parseText(xml);			Element el=doc.getRootElement();			for(Iterator<?> it=el.elementIterator();it.hasNext();){				Element element = (Element) it.next();				str.append(element.getText().replaceAll("[\n-\r]", ""));			}			return str.toString();		} catch (DocumentException e) {			e.printStackTrace();			return null;		}	}   //获取XML指定节点值	public static String getXMLElementValue(String xml, String elementName) {		try {			Document doc = DocumentHelper.parseText(xml);			Element elemetn = (Element) doc					.selectSingleNode("//" + elementName);			return elemetn.getText();		} catch (DocumentException e) {			e.printStackTrace();			return null;		}	}	/**	 * 解析XML字符串为对象	* @Title: unmarshallerXML 	* @Description: TODO	* @Author zguowei jakbb01@gmail.com	* @Time 2013-6-6 下午3:34:02	* @return T	* @throws	 */	@SuppressWarnings("unchecked")	public static <T> T unmarshallerXML(String xml, Class<T> clazz) {		JAXBContext context;		try {			context = JAXBContext.newInstance(clazz);			Unmarshaller unmarshaller = context.createUnmarshaller();			return (T) unmarshaller.unmarshal(new StringReader(xml));		} catch (Exception e) {			e.printStackTrace();			return null;		}	}		/**	 * 得到XML 所有节点值	* @Title: getXmlAllElmentValue 	* @Description: TODO	* @Author zguowei jakbb01@gmail.com	* @Time 2013-6-6 下午3:02:33	* @param xml	* @return	* @return String	* @throws	 */	public static String getXmlAllElmentValue(String xml){		StringBuffer str=new StringBuffer(); 			try {				org.dom4j.Document doc= DocumentHelper.parseText(xml);				org.dom4j.Element el=doc.getRootElement();				return recGetXmlElementValue(el,str).toString();			} catch (DocumentException e) {				e.printStackTrace();				return null;			}		}				private static StringBuffer recGetXmlElementValue(org.dom4j.Element ele,StringBuffer valueBuff){			List<Element> eleList = ele.elements();			if(eleList.size()==0){				valueBuff.append(ele.getText().replaceAll("[\n-\r]", ""));				return valueBuff;			}else{				for(Iterator<org.dom4j.Element> iter = eleList.iterator();iter.hasNext();){					org.dom4j.Element innerEle = iter.next();					recGetXmlElementValue(innerEle,valueBuff);				}				return valueBuff;			}		}}