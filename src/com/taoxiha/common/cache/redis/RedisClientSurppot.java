package com.taoxiha.common.cache.redis;import java.util.List;import java.util.Map;import java.util.concurrent.TimeUnit;import org.springframework.data.redis.connection.jedis.JedisConnection;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import com.taoxiha.common.cache.redis.CacheAccessException.ErrorCode;import com.taoxiha.common.utils.SpringHelper;public class RedisClientSurppot {	/**	 * 默认过期时长 1天	 */	protected static final long DEFAULT_TIMEOUT =  60 * 60 * 24   ;		public static RedisClientSurppot getRedisClient(){		return (RedisClientSurppot)SpringHelper.getBean("redisClientSurppot");	}		private RedisTemplate<String,Object> redisTemplate;		private JedisConnectionFactory jedisConnectionFactory;	protected void delete(String key) throws CacheAccessException{		try {			redisTemplate.delete(key);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	protected void deleteHashValues(final String key , final String... hashKeys) throws CacheAccessException{		JedisConnection jedis = null ;		try {			jedis = getJedis();			jedis.getNativeConnection().hdel(key, hashKeys);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}finally{			if(jedis != null ){				jedis.close();			}		}	}		/**	 * 设置过期时间	 * @param key 键	 * @param timeout 过期时长 单位秒	 * @throws CacheAccessException 	 */	protected void expire(String key , long timeout) throws CacheAccessException{		try {			redisTemplate.expire(key, timeout, TimeUnit.SECONDS);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}		protected Map<Object, Object> getHash(String key) throws CacheAccessException{		try {			if(!hasKey(key)){				return null;			}			return redisTemplate.opsForHash().entries(key);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	protected Object getHashValue(String key , String hashKey) throws CacheAccessException{		try {			return  redisTemplate.opsForHash().get(key, hashKey);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}		protected JedisConnection getJedis(){		return jedisConnectionFactory.getConnection();	}	protected List<Object> getList(String key){		return getList(key, 0, -1);	}		protected List<Object> getList(String key , long start , long end){		return this.redisTemplate.opsForList().range(key, start, end);	}		protected String getString(String key) throws CacheAccessException{		try {			return (String) redisTemplate.opsForValue().get(key);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}		protected boolean hasKey(String key) throws CacheAccessException{		try {			return redisTemplate.hasKey(key);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	protected void listRpush(String key , String value) throws CacheAccessException{		this.redisTemplate.opsForList().rightPush(key, value);		this.expire(key, DEFAULT_TIMEOUT);	}	 		/**	 * 放一个hashMap到缓存	 * @param key 键	 * @param hash 值	 * @param timeout 过多久过期，单位秒	 * @throws CacheAccessException 	 */	protected void setHash(String key , Map<String, Object> hash  ) throws CacheAccessException{		try {			redisTemplate.opsForHash().putAll(key, hash);			this.expire(key, DEFAULT_TIMEOUT);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	 		protected void setHash(String key , String hashKey , Object hashValue ) throws CacheAccessException{		try {			redisTemplate.opsForHash().put(key, hashKey, hashValue);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}	 			public void setJedisConnectionFactory(			JedisConnectionFactory jedisConnectionFactory) {		this.jedisConnectionFactory = jedisConnectionFactory;	}	protected void setList(String key , List<String> list) throws CacheAccessException{		JedisConnection jedis = null ;		try {			jedis = getJedis();			jedis.getNativeConnection().rpush(key, list.toArray(new String[]{}));			this.expire(key, DEFAULT_TIMEOUT);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}finally{			if(jedis != null ){				jedis.close();			}		}	}	public void setRedisTemplate(RedisTemplate<String, Object> redisTemplate) {		this.redisTemplate = redisTemplate;	}	protected void setString(String key,String value ) throws CacheAccessException{		 this.setString(key, value, DEFAULT_TIMEOUT);	}	/**	 * 	 * @param key	 * @param value	 * @param timeout	 * @throws CacheAccessException	 */	protected void setString(String key,String value , long timeout) throws CacheAccessException{		try {			redisTemplate.opsForValue().set(key,value);			redisTemplate.expire(key, timeout , TimeUnit.SECONDS);		} catch (Exception e) {			throw new CacheAccessException(ErrorCode.CONNECTION_CACHE_ERROR);		}	}		public void set(String key , Object value) throws CacheAccessException{		redisTemplate.opsForValue().set(key, value);		this.expire(key, DEFAULT_TIMEOUT);	}	public void set(String key , Object value , long timeout){		redisTemplate.opsForValue().set(key, value);		redisTemplate.expire(key, timeout , TimeUnit.SECONDS);	}	public Object get(String key){		return redisTemplate.opsForValue().get(key);	}}