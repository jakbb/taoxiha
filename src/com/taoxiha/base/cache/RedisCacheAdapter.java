package com.taoxiha.base.cache;import java.util.HashMap;import java.util.Map;import org.apache.commons.beanutils.BeanUtils;import org.springframework.stereotype.Service;import com.taoxiha.common.cache.redis.BaseCacheMange;import com.taoxiha.common.cache.redis.CacheAccessException;import com.taoxiha.common.util.holder.ApplicationContextHolder;import com.taoxiha.common.utils.log.LogUtils;@Servicepublic class RedisCacheAdapter extends BaseCacheMange<Object> {	private static final Map<String, Object> tempCache = new HashMap<String, Object>();	 	public static RedisCacheAdapter getInstance(){		return ApplicationContextHolder.getApplicationContext().getBean(RedisCacheAdapter.class);	}		@Override	public Class<Object> getEntityClass() {		return Object.class;	}	public void set(String key , Object value){		try {			super.set(key, value);		} catch (Exception e) {			LogUtils.errorLog("redis fail ", e);			tempCache.put(key, value);		}	}	public Object get(String key ){		try {			return super.get(key);		} catch (Exception e) {			LogUtils.errorLog("redis fail ", e);			return tempCache.get(key);		}	}		@Override	public void setHash(String key, String hashKey, Object hashValue)  {		try {			super.setHash(key, hashKey, hashValue);		} catch (CacheAccessException e) {			if(tempCache.containsKey(key)){				Map<String, Object> hash = (Map<String, Object>) tempCache.get(key);				hash.put(hashKey, hashValue);			}else{				Map<String, Object> hash = new HashMap<String, Object>();				hash.put(hashKey, hashValue);				tempCache.put(key, hash);			}		}	}		@Override	public Object getHashValue(String key, String hashKey)   {		try {			return super.getHashValue(key, hashKey);		} catch (Exception e) {			Object o = tempCache.get(key);			if(o == null ){				return null;			}			Map<String, Object> map = (Map<String, Object>) o ;			return map.get(hashKey);		}	}	@SuppressWarnings("unchecked")	@Override	public Map<Object, Object> getHash(String key)   {		try {			return super.getHash(key);		} catch (Exception e) {			return (Map<Object, Object>) tempCache.get(key);		}	}		public String getString(String key){		try {			return super.getString(key);		} catch (Exception e) {			LogUtils.errorLog("redis fail ", e);			return (String) tempCache.get(key);		}	}		@SuppressWarnings("unchecked")	public <T> T getEntity(String key , Class<T> clazz){		try {			Map m = super.getHash(key);			T t = clazz.newInstance();			BeanUtils.populate(t, m);			return t;		} catch (RuntimeException e) {			LogUtils.errorLog("redis fail ", e);			return (T) tempCache.get(key);		}catch (Exception e){			return null;		}	}			public void delete(String key){		try {			super.delete(key);		} catch (Exception e) {			LogUtils.errorLog("redis fail ", e);			tempCache.remove(key);		}	}	@Override	@Deprecated	public void add(Object entity)  {		throw new RuntimeException("not support");	}}